{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alerts.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","buttonTxt","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","navigator","clipboard","writeText","split","join","length","defaultProps","AboutText","Alerts","alerts","role","word","lower","charAt","slice","capitalize","msg","App","setMode","alert","setAlert","setbuttonTxt","massage","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.559b2f67.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n      \r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav mr-auto\">\r\n              <li className=\"nav-item active\">\r\n                <a className=\"nav-link\" href=\"#\">Home <span className=\"sr-only\">(current)</span></a>\r\n              </li>\r\n              {/* <li className=\"nav-item\">\r\n                <a className=\"nav-link\" href=\"/about\">{props.AboutText}</a>\r\n              </li>\r\n               */}\r\n            </ul>\r\n            {/* <form className=\"form-inline my-2 my-lg-0\">\r\n              <input className=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n              <button className=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button>\r\n            </form> */}\r\n                <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n               <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n               <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{props.buttonTxt}</label>\r\n              </div>\r\n          </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n\r\n    title: PropTypes.string.isRequired,\r\n    AboutText: PropTypes.string.isRequired\r\n    \r\n}\r\nNavbar.defaultProps = {\r\n\r\n    title: 'Default Home',\r\n    AboutText: 'Default About'\r\n    \r\n}","import React, {useState} from 'react';\r\n\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = ()=> {\r\n       let newText = text.toUpperCase();\r\n       setText(newText);\r\n       props.showAlert(\"Converted to uppercase!\", \"success\");\r\n    }\r\n    const handleLoClick = ()=> {\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to LowerCase!\", \"success\");\r\n     }\r\n    const handleClrClick = ()=> {\r\n       let newText = '';\r\n       setText(newText);\r\n       props.showAlert(\"Text has been cleared!\", \"success\");\r\n    }\r\n    const handleRemoveESClick = ()=> {\r\n       let newText = text.split(/[ ]+/);\r\n       setText(newText.join(\" \"));\r\n       props.showAlert(\"Extra Space has been Removed!\", \"success\");\r\n    }\r\n    const handleCopyClick = ()=> {\r\n       \r\n        navigator.clipboard.writeText(text)\r\n        props.showAlert(\"Text has been copied!\", \"success\");\r\n       \r\n    }\r\n   \r\n    const handleOnChange = (event)=> {\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const [text,setText] = useState('');\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color: props.mode === 'dark' ? 'white' : 'black'}}>\r\n         <h1>{props.heading}</h1>\r\n         <div className=\"mb-3\">\r\n       <textarea className=\"form-control\" id=\"myBox\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode === 'dark' ? 'grey' : 'white', color: props.mode === 'dark' ? 'white' : 'black'}} rows=\"8\"></textarea>\r\n        </div>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>Convert to UpperCase</button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleLoClick}>Convert to LowerCase</button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleClrClick}>Clear Text</button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleCopyClick}>Copy Text</button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleRemoveESClick}>Remove Extra Spaces</button>\r\n        </div>\r\n        <div className=\"container my-3\" style={{color: props.mode === 'dark' ? 'white' : 'black'}}>\r\n        <h1>Your Text summary</h1>\r\n        <b>\r\n        {/* <p>{text.split(/[^\\s]+/).length} words, {text.length} characters</p> */}\r\n        <p>{text.split(\" \")[text.split(\" \").length-1] === \"\" ?text.split(\" \").length-1:text.split(\" \").length }  words and {text.length} character</p>\r\n        <p>{ 0.008 * text.split(\" \").length} Minutes read</p>\r\n        </b>\r\n        <h1>Preview</h1>\r\n        <p>{text.length > 0 ? text : 'Enter something to preview it here...'}</p>\r\n        </div>\r\n\r\n\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alerts(props) {\r\n\r\n    const capitalize=(word)=> {\r\n\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n\r\n    return (\r\n        props.alerts && <div className={`alert alert-${props.alerts.type} alert-dismissible fade show`} role=\"alert\">\r\n   <strong>{capitalize(props.alerts.type)}</strong>:{props.alerts.msg}\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Alerts\r\n","//import logo from './logo.svg';\nimport './App.css';\nimport Navbar from './components/Navbar';\n// import About from './components/About';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react'\nimport Alerts from './components/Alerts';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from \"react-router-dom\";\n\n\n\nfunction App() {\n  \n    const [mode, setMode] = useState('light');\n    const [alert, setAlert] = useState(null);\n    const [buttonTxt, setbuttonTxt] = useState('Enable Dark Mode');\n\n    const showAlert = (massage,type)=> \n    {\n      setAlert({\n        msg: massage,\n        type: type\n      })\n      setTimeout(() => {\n        setAlert(null);\n      }, 1500);\n    }\n\n    const toggleMode = ()=> {\n      if(mode === 'dark')\n      {\n        setMode('light');\n        setbuttonTxt('Enable Dark Mode');\n        document.body.style.backgroundColor = 'white';\n        showAlert(\"Light mode has beed enabled!\", \"success\");\n\n      }else\n      {\n        setMode('dark');\n        setbuttonTxt('Enable Light Mode');\n        document.body.style.backgroundColor = '#212529';\n        showAlert(\"Dark mode has beed enabled!\", \"success\");\n      }\n      \n   }\n\n  return (\n   \n    <>\n    {/* <Router>  */}\n  <Navbar title=\"TextUtils\" mode={mode} buttonTxt={buttonTxt} toggleMode={toggleMode} AboutText = \"About\" />\n  <Alerts alerts ={alert} />\n  <div className=\"container my-8\" >\n  {/* <Switch>\n          <Route exact path=\"/about\">\n            <About />\n          </Route>\n          <Route exact path=\"/\">\n          <TextForm showAlert={showAlert} heading=\"Enter The Text to analyze below\" mode={mode} />\n          </Route>\n        </Switch> */}\n   <TextForm showAlert={showAlert} heading=\"Enter The Text to analyze below\" mode={mode} />\n  {/* <About/> */}\n  </div>\n  {/* </Router> */}\n\n    </>\n    \n   \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}